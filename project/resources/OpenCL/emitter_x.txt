#define EMISSION_POWER	10
#define EMISSION_FORCE	1

kernel void				emitter_start(
						global int *number_of_particles,
						global int *number_of_objects,
						global object_type *object_type,
						global vector3 *object_position,
						global float *object_power,
						global char *is_alive,
                        global int *born_by_emitter)
{
	int					counter;
	int					object_i = 0;
	int					particle_i = 0;

	for (; object_i < *number_of_objects && particle_i < *number_of_particles; object_i++)
	{
		if (object_type[object_i] != object_type_emitter)
			continue ;

		counter = 0;
		for (; particle_i < *number_of_particles; particle_i++)
			if (is_alive[particle_i] == 0)
			{
				born_by_emitter[particle_i] = object_i;
				if (++counter == EMISSION_POWER * object_power[object_i])
					break ;
			}
	}
}

kernel void				emitter_finish(
						global char *is_alive,
						global int *born_by_emitter)
{
	const int			global_id = get_global_id(0);

	if (born_by_emitter[global_id] != -1)
		is_alive[global_id] = 1;
	born_by_emitter[global_id] = -1;
}

kernel void				emitter_execute(
						global vector3 *object_position,
						global vector3 *position,
                        global vector3 *velocity,
                        global vector3 *acceleration,
						global int *born_by_emitter,
						global xorshift_state *state)
{
	const int			global_id = get_global_id(0);

	if (born_by_emitter[global_id] != -1)
	{
		position[global_id] = object_position[born_by_emitter[global_id]];

		velocity[global_id].x = xorshift_next_float(state + global_id) - 0.5f;
		velocity[global_id].y = xorshift_next_float(state + global_id) - 0.5f;
		velocity[global_id].z = xorshift_next_float(state + global_id) - 0.5f;
		velocity[global_id] = vector3_normalize(velocity[global_id]);
		velocity[global_id] = vector3_multiply(velocity[global_id], EMISSION_FORCE);

		acceleration[global_id] = vector3_empty();
	}
}
